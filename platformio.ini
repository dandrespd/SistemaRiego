; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = firmware/src

[env:esp32dev]
platform = espressif32
board = esp32doit-devkit-v1 ; use DOIT devkit v1 for 38-pin ESP32
framework = arduino
monitor_speed = 115200

; =============================================================================
; DEPENDENCIAS OPTIMIZADAS
; =============================================================================
lib_deps =
	; RTC DS1302 - Versión estable
	caligari/Ds1302@^1.1.0
	
	; Servidor web asíncrono - Versiones compatibles
	esphome/ESPAsyncWebServer-esphome@^3.2.2
	esphome/AsyncTCP-esphome@^2.0.1
	
	; JSON - Versión estable sin conflictos de macros
	bblanchon/ArduinoJson@^6.21.4
	
	; mDNS - Para dominio fijo local
	ESPmDNS@^2.0.0
	
	; SD Card - Para logging en archivo
	SD@^2.0.0
	
	; Nota: No se usa la librería Servo porque no es compatible con ESP32
	; Se implementa control PWM nativo del ESP32

; =============================================================================
; CONFIGURACIÓN DE ARCHIVOS
; =============================================================================
board_build.filesystem = spiffs
board_build.partitions = default.csv

; =============================================================================
; EXCLUSIONES DE LIBRERÍAS
; =============================================================================
lib_ignore = 
	AsyncTCP_RP2040W
	AsyncTCP_ESP32

; =============================================================================
; FLAGS DE COMPILACIÓN OPTIMIZADOS
; =============================================================================
build_flags = 
    -DCORE_DEBUG_LEVEL=3
    -Iinclude
    -Isrc
    -Ifirmware/include
    -Ifirmware/include/core
    -Ifirmware/include/drivers
    -Ifirmware/include/network
    -Ifirmware/include/utils
    -I.

; =============================================================================
; CONFIGURACIÓN OTA (Over-The-Air Updates)
; =============================================================================
; Configuración para actualizaciones remotas sin cable
upload_protocol = espota
upload_port = riego-inteligente.local
upload_flags =
    --auth=riego2025secure
    --port=3232

; Para carga inicial via USB, usar esptool (comentado para OTA por defecto)
; upload_protocol = esptool

; --- Additional env for USB flashing (initial programming)
[env:esp32doit-usb]
platform = espressif32
board = esp32doit-devkit-v1
framework = arduino
monitor_speed = 115200
upload_protocol = esptool
upload_speed = 115200
build_flags = 
    ${env.build_flags}
    -Wall -Wextra
lib_deps = ${env.lib_deps}
lib_ignore = ${env.lib_ignore}
board_build.filesystem = spiffs
board_build.partitions = default.csv

; --- OTA env (keep original OTA config for remote updates)
[env:esp32dev-ota]
platform = espressif32
board = esp32doit-devkit-v1
framework = arduino
monitor_speed = 115200
upload_protocol = espota
upload_port = riego-inteligente.local
upload_flags =
    --auth=riego2025secure
    --port=3232
build_flags = 
    ${env.build_flags}
    -Wall -Wextra
lib_deps = ${env.lib_deps}
lib_ignore = ${env.lib_ignore}
board_build.filesystem = spiffs
board_build.partitions = default.csv
